[{"url": "https://github.com/jrdeng/jrdeng.github.io/issues/1", "number": "1", "title": "用github的issue做记录并生成静态博客", "author": "jrdeng", "createdAt": "2018-08-27T15:58:43Z", "body": "构思：\r\n\r\n1. 在github上写issue\r\n2. 把issue爬下来（[github-issue-fetcher](https://github.com/jrdeng/github-issue-fetcher)）\r\n3. 评论系统用[https://utteranc.es/](https://utteranc.es/)，可以跟issue完美结合\r\n4. 用hugo等生成静态博客，并发布到github page（[blog-hugo](https://github.com/jrdeng/blog-hugo)）\r\n\r\n\r\n## 1. 在github上写issue\r\n\r\n正如本篇一样，写到github的issue页面里，并保持OPEN状态。\r\n\r\n可以加一些 Labels（blog-hugo会当作tag写入博客）\r\n\r\n## 2. 把issue爬下来\r\n\r\n写了些Python脚本，通过Github GraphQL API去爬issue list。\r\n\r\n由于API的限制，每次抓issues 最大只能100条（first:100），如果issue数目超过100， 需要用到 cursor 多次获取。\r\n\r\n然后偶然发现author字段有时候会返回None， 有点没搞明白。。。\r\n\r\n## 3. 评论系统\r\n\r\n一句话：[https://utteranc.es/](https://utteranc.es/) is amazing!!!\r\n\r\n## 4. 用hugo等生成静态博客，并发布到github page\r\n\r\n按照hugo和主题的需求，写Markdown文件头，以及内容。（以及评论系统的脚本）\r\n\r\n我本地会有一个cron job自动去重新抓取issue和生成博客（如果内容没有变化，则不用push到github）。\r\n\r\n", "labels": ["GraphQL", "Python", "hugo", "技术", "测试标签"]}, {"url": "https://github.com/jrdeng/jrdeng.github.io/issues/3", "number": "3", "title": "测试局域网的可用（外出）端口", "author": "jrdeng", "createdAt": "2018-09-30T07:05:37Z", "body": "由于某些特殊原因，公司对外出的端口进行了限制，基本上只允许最常用的几个（21，22，80，443等）。\r\n\r\n这样的结果是，一些使用了自定义端口的网站 (https://example.com:8080) 就没办法访问了。\r\n\r\n这样我在家里的NAS服务器上装的nextcloud需要维护管理的时候就不太方便了（因为电信默认禁止了80和443端口的访问，自建的NAS服务器只能用自定义端口）。\r\n\r\n因为是自用，不可能让IT开绿灯，折中一下，只有找一个公司这边也开放的端口，然后就用这个端口来做NAS服务端口。\r\n\r\n说干就干，找到一个监听了（几乎）所有端口的服务器： [http://portquiz.net](http://portquiz.net) （表示感谢！）\r\n\r\n写个脚本跑一跑：\r\n\r\n    #!/bin/bash\r\n\r\n    output=available_ports.txt\r\n    echo \"\" > $output\r\n\r\n    for i in $(seq 1 65535); do\r\n        echo \"testing $i...\"\r\n        nc -zv portquiz.net $i 2>&1 | grep \"succeeded\" >> $output\r\n    done\r\n\r\n    echo\r\n    echo \"--= DONE =--\"\r\n    echo\r\n\r\n一顿扫下来，发现开放的端口果然很少。。勉强找两个用起来。\r\n", "labels": ["技术"]}, {"url": "https://github.com/jrdeng/jrdeng.github.io/issues/4", "number": "4", "title": "cannot locate symbol \"_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base\"", "author": "jrdeng", "createdAt": "2018-11-08T03:17:39Z", "body": "用NDK standalone toolchain编译生成的动态库，在设备上跑的时候报这个错。\r\n\r\n搜了一下这个符号，似乎是STL相关的（？），而且是 libgnustl 里才有。\r\n\r\n最后解决办法：make standalone toolchain的时候，指定 `--stl=libcxx` ，不使用默认的 libgnustl。\r\n\r\n这样生成的toolchain不包含这个符号，生成的动态库也不会去找这个符号。\r\n\r\n（以前一直用的默认的libgnustl并没有报错，应该是项目上没用到STL相关的东西？）\r\n", "labels": ["Android", "技术"]}, {"url": "https://github.com/jrdeng/jrdeng.github.io/issues/5", "number": "5", "title": "blog-hugo的bug导致生成静态页面失败", "author": "jrdeng", "createdAt": "2018-11-13T10:03:58Z", "body": "[这个bug](https://github.com/jrdeng/blog-hugo/issues/2) 导致hugo生成静态页面失败。\r\n\r\n之前在另一台机器上解决了这个问题，也 [提交](https://github.com/jrdeng/blog-hugo/commit/470c5728e5ed7528e0ea7b84a5aa196a4906ee91) 到github了。\r\n\r\n但是由于家里跑cron job的机器没有自动更新blog-hugo的代码，结果这两天的博客都是404。。。\r\n\r\n自动生成博客之前还是要先更新 blog-hugo 项目的代码啊！\r\n", "labels": ["hugo", "技术"]}, {"url": "https://github.com/jrdeng/jrdeng.github.io/issues/6", "number": "6", "title": "fatal error: 'asm/types.h' file not found", "author": "jrdeng", "createdAt": "2019-03-15T09:27:44Z", "body": "用cmake+ndk的时候遇到一个错误：\r\n\r\n```\r\nfatal error: 'asm/types.h' file not found\r\n```\r\n\r\n用的是ndk自带的 `build/cmake/android.toolchain.cmake`。\r\n\r\n看现象是include路径没包含进来。\r\n\r\n解决方案，修改 `build/cmake/android.toolchain.cmake`，增加：\r\n\r\n```\r\nif (${ANDROID_ABI} STREQUAL \"x86_64\")\r\n    include_directories(${ANDROID_SYSROOT}/usr/include/x86_64-linux-android)\r\nelseif (${ANDROID_ABI} STREQUAL \"x86\")\r\n    include_directories(${ANDROID_SYSROOT}/usr/include/i686-linux-android)\r\nelseif (${ANDROID_ABI} STREQUAL \"arm64-v8a\")\r\n    include_directories(${ANDROID_SYSROOT}/usr/include/aarch64-linux-android)\r\nelseif (${ANDROID_ABI} STREQUAL \"armeabi-v7a\")\r\n    include_directories(${ANDROID_SYSROOT}/usr/include/arm-linux-androideabi)\r\nendif()\r\n```\r\n\r\n搞定。\r\n", "labels": ["Android", "技术"]}, {"url": "https://github.com/jrdeng/jrdeng.github.io/issues/7", "number": "7", "title": "解决Windows不能远程登录ubuntu18.04.2（xRDP）的问题", "author": "jrdeng", "createdAt": "2019-03-29T02:35:05Z", "body": "Windows远程登录工具（mstsc）可以说是比较好用的，为了方便开发，尝试在ubuntu上搭建xRDP，结果一直卡在登录界面。\r\n\r\n表象是输入账号密码后，屏幕空白一段时间，然后提示：\r\n\r\n```\r\nconnection problem,giving up\r\nsome problem\r\n```\r\n![image](https://user-images.githubusercontent.com/170314/55204676-e3697280-520a-11e9-8359-58c853f8c051.png)\r\n\r\n各种分析之后发现应该是少了一个叫 `xorgxrdp` 的包，那就装上吧，结果这个包依赖另一个叫`xserver-xorg-core`的包，但是依赖不满足，所以没自动推荐安装。\r\n\r\n那就手动安装`xserver-xorg-core`吧，结果发现这货要让我卸载很多东西，包括xorg的很多包和桌面（xubuntu-desktop）。。。我怕会破坏环境影响使用，就停在这里没继续了。\r\n\r\n```\r\n$ sudo apt-get install xserver-xorg-core\r\n\r\nSuggested packages:\r\n  xfonts-100dpi | xfonts-75dpi\r\nThe following packages will be REMOVED:\r\n  xorg xserver-xorg-core-hwe-18.04 xserver-xorg-hwe-18.04 xserver-xorg-input-all-hwe-18.04 xserver-xorg-input-libinput-hwe-18.04\r\n  xserver-xorg-input-synaptics-hwe-18.04 xserver-xorg-input-wacom-hwe-18.04 xserver-xorg-video-all-hwe-18.04\r\n  xserver-xorg-video-amdgpu-hwe-18.04 xserver-xorg-video-ati-hwe-18.04 xserver-xorg-video-fbdev-hwe-18.04\r\n  xserver-xorg-video-intel-hwe-18.04 xserver-xorg-video-nouveau-hwe-18.04 xserver-xorg-video-qxl-hwe-18.04\r\n  xserver-xorg-video-radeon-hwe-18.04 xserver-xorg-video-vesa-hwe-18.04 xserver-xorg-video-vmware-hwe-18.04 xubuntu-core\r\n  xubuntu-desktop\r\nThe following NEW packages will be installed:\r\n  xserver-xorg-core\r\n0 upgraded, 1 newly installed, 19 to remove and 0 not upgraded.\r\nNeed to get 1,351 kB of archives.\r\nAfter this operation, 5,753 kB disk space will be freed.\r\n```\r\n\r\n后来发现 Griffon 的 [这篇文章：http://c-nergy.be/blog/?p=13390](http://c-nergy.be/blog/?p=13390) （因为已经fix了，图片也是借用的他文章里的，感谢！）。文章提到卸载后再把xorg的一些包安装回去就可以了，既然有先行者了，我就跟着做吧。\r\n\r\n各种安装、卸载，最后我多加了一步，把桌面装回来了：\r\n\r\n```\r\n$ sudo apt-get install xserver-xorg-core\r\n$ sudo apt-get -y install xserver-xorg-input-all\r\n$ sudo apt-get install xorgxrdp\r\n$ sudo apt-get install xubuntu-desktop\r\n```\r\n\r\n装完重启，环境看起来一切OK，暂时未见明显异常。\r\n\r\nWindows登录，成功！又可以愉快的搬砖了。。。\r\n\r\n最后，Thanks Griffon!  \r\n\r\n所以说遇到困难还是要勇于尝试啊 =。=\r\n\r\n感觉少了年轻时候的锐气，想当年折腾系统的时候，可是不惜数据被格式化无数遍的啊  lol.\r\n", "labels": ["Ubuntu", "xRDP", "技术"]}, {"url": "https://github.com/jrdeng/jrdeng.github.io/issues/8", "number": "8", "title": "Lua 5.4.x CMakeLists.txt", "author": "jrdeng", "createdAt": "2020-10-30T04:22:14Z", "body": "```\r\ncmake_minimum_required(VERSION 3.12)\r\n\r\nproject(Lua)\r\n\r\nadd_definitions(-DLUA_COMPAT_5_3)\r\nif(UNIX)\r\n    add_definitions(-DLUA_USE_LINUX)\r\nendif(UNIX)\r\n\r\n\r\n### force options\r\nif(WIN32)\r\n    add_compile_options(\"$<$<C_COMPILER_ID:MSVC>:/utf-8>\")\r\n    add_compile_options(\"$<$<CXX_COMPILER_ID:MSVC>:/utf-8>\")\r\nendif()\r\n\r\n# see https://www.lua.org/manual/5.4/readme.html#other\r\n\r\n\r\n### build lib\r\nset(C_FILES lapi.c lcode.c lctype.c ldebug.c ldo.c ldump.c lfunc.c lgc.c llex.c lmem.c lobject.c lopcodes.c lparser.c lstate.c lstring.c ltable.c ltm.c lundump.c lvm.c lzio.c lauxlib.c lbaselib.c lcorolib.c ldblib.c liolib.c lmathlib.c loadlib.c loslib.c lstrlib.c ltablib.c lutf8lib.c linit.c)\r\n# prepend 'src/'\r\nlist(TRANSFORM C_FILES PREPEND \"src/\")\r\n# in C++ style\r\nset_source_files_properties(${C_FILES} PROPERTIES LANGUAGE CXX)\r\nadd_library(lua STATIC ${C_FILES})\r\n\r\n\r\n### build interpreter\r\nset(C_FILES \"src/lua.c\")\r\nset_source_files_properties(${C_FILES} PROPERTIES LANGUAGE CXX)\r\nadd_executable(lua-interpreter ${C_FILES})\r\ntarget_link_libraries(lua-interpreter lua)\r\nif(UNIX)\r\n    target_link_libraries(lua-interpreter m dl)\r\nendif(UNIX)\r\nset_target_properties(lua-interpreter PROPERTIES OUTPUT_NAME lua)\r\n\r\n\r\n### build compiler\r\nset(C_FILES \"src/luac.c\")\r\nset_source_files_properties(${C_FILES} PROPERTIES LANGUAGE CXX)\r\nadd_executable(luac ${C_FILES})\r\ntarget_link_libraries(luac lua)\r\nif(UNIX)\r\n    target_link_libraries(luac m dl)\r\nendif(UNIX)\r\n\r\n# install target\r\ninstall(TARGETS lua\r\n    RUNTIME DESTINATION lib\r\n    LIBRARY DESTINATION lib\r\n    ARCHIVE DESTINATION lib\r\n)\r\ninstall(TARGETS lua-interpreter luac\r\n    RUNTIME DESTINATION bin\r\n)\r\ninstall(FILES src/lua.hpp src/lua.h src/lualib.h src/lauxlib.h src/luaconf.h\r\n    DESTINATION include\r\n)\r\n```", "labels": ["Lua", "技术"]}, {"url": "https://github.com/jrdeng/jrdeng.github.io/issues/9", "number": "9", "title": "KVM/libvirt forwarding ports to guest via iptables", "author": "jrdeng", "createdAt": "2021-01-07T08:59:58Z", "body": "```\r\n# connections from outside\r\nsudo iptables -I FORWARD -o virbr0 -d  192.168.122.226 -j ACCEPT\r\nsudo iptables -t nat -A PREROUTING -p tcp --dport 8006 -j DNAT --to 192.168.122.226:8006\r\nsudo iptables -t nat -A POSTROUTING -s 192.168.122.0/24 -j MASQUERADE\r\n\r\n# local subnet\r\nsudo iptables -A FORWARD -o virbr0 -m state --state RELATED,ESTABLISHED -j ACCEPT\r\nsudo iptables -A FORWARD -i virbr0 -o enp0s31f6 -j ACCEPT\r\nsudo iptables -A FORWARD -i virbr0 -o lo -j ACCEPT\r\n\r\n# save to persistent rules\r\nsudo service netfilter-persistent save\r\nsudo service netfilter-persistent reload\r\n```\r\n\r\nrefer to: [https://aboullaite.me/kvm-qemo-forward-ports-with-iptables/](https://aboullaite.me/kvm-qemo-forward-ports-with-iptables/)\r\n", "labels": ["KVM", "iptables", "技术"]}, {"url": "https://github.com/jrdeng/jrdeng.github.io/issues/10", "number": "10", "title": "引进评论系统：utterances", "author": "jrdeng", "createdAt": "2021-01-15T07:37:08Z", "body": "https://utteranc.es/ \r\n\r\n和github issue完美结合！\r\n\r\n之前只能把评论爬下来显示在静态博客里，现在直接嫁接到静态博客里了，不用跑回github来写评论了，完美！\r\n", "labels": []}]